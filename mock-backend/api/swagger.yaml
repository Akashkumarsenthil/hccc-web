---
swagger: "2.0"
info:
  description: "This is the API Interface definition for HCCC'c Youth and Education\
    \ Application"
  version: "1.0.0"
  title: "HCCC Youth and Education API"
  contact:
    email: "ec_it@livermoretemple.org"
host: "livermoretemple.org"
basePath: "/yande/api"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /courses:
    get:
      tags:
      - "courses"
      summary: "Retrieve courses from the catalogue"
      operationId: "getCourses"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - name: "tags"
        in: "query"
        description: "Tags to be used as filter - comma seperated list of tags"
        required: false
        type: "string"
      responses:
        200:
          description: "Success - List of items returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveCoursesListResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Courses"
    post:
      tags:
      - "courses"
      summary: "Add a new course to the catalogue"
      operationId: "addCourse"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateCourseRequest"
      responses:
        200:
          description: "Success - Item returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveCourseResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Forbidden - the devotee does not have permissions to call\
            \ this endpoint"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Courses"
  /courses/{courseId}:
    get:
      tags:
      - "courses"
      summary: "Retrieve course by Course Id"
      operationId: "getCourseById"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - name: "courseId"
        in: "path"
        description: "Id of the course to be retrieved"
        required: true
        type: "string"
      responses:
        200:
          description: "Success - Item returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveCourseResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Resource Not Found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Courses"
  /teachers:
    get:
      tags:
      - "teachers"
      summary: "Retrieve list of teachers"
      operationId: "getTeachers"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      responses:
        200:
          description: "Success - List of items returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveTeachersListResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Forbidden - the devotee does not have permissions to call\
            \ this endpoint"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Teachers"
    post:
      tags:
      - "teachers"
      summary: "Add a new teacher to the system"
      operationId: "registerTeacher"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RegisterTeacherRequest"
      responses:
        200:
          description: "Success - Item returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveTeacherResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Forbidden - the devotee does not have permissions to call\
            \ this endpoint"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Teachers"
  /teachers/{teacherId}:
    get:
      tags:
      - "teachers"
      summary: "Retrieve teacher by teacher Id"
      operationId: "getTeacherById"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - name: "teacherId"
        in: "path"
        description: "Id of the teacher to be retrieved"
        required: true
        type: "string"
      responses:
        200:
          description: "Success - Item returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveTeacherResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Forbidden - the devotee does not have permissions to call\
            \ this endpoint"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Resource Not Found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Teachers"
  /indemnities:
    get:
      tags:
      - "indemnities"
      summary: "Retrieve indemnities from the system. Only indemnities belonging to\
        \ the requesting user account will be returned. User Account information is\
        \ available in the header."
      operationId: "getIndemnities"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      responses:
        200:
          description: "Success - List of items returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveIndemnitiesListResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Indemnities"
    post:
      tags:
      - "indemnities"
      summary: "Add a new indemnity to the system"
      operationId: "addIndemnity"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateIndemnityRequest"
      responses:
        200:
          description: "Success - Item returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveIndemnityResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Indemnities"
  /accounts:
    get:
      tags:
      - "accounts"
      summary: "Retrieve accounts from the system"
      operationId: "getAccounts"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - name: "userName"
        in: "query"
        description: "If a userName is passed in query string, the results will be\
          \ filtered by accounts user name"
        required: false
        type: "string"
      - name: "phoneNumber"
        in: "query"
        description: "If a phone number is passed in query string, the results will\
          \ be filtered by accounts mobile number"
        required: false
        type: "string"
      - name: "role"
        in: "query"
        description: "If a role is passed in query string, the results will be filtered\
          \ by roles"
        required: false
        type: "string"
      responses:
        200:
          description: "Success - List of items returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveAccountsListResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Forbidden - the devotee does not have permissions to call\
            \ this endpoint"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Resource Not Found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Accounts"
  /account/{userName}/enrollments:
    get:
      tags:
      - "enrollments"
      summary: "Retrieve enrollments from the system. Only enrollments belonging to\
        \ the requesting user account will be returned. User Account information is\
        \ available in the header."
      operationId: "getEnrollments"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - name: "userName"
        in: "path"
        description: "Id of the account to be retrieved"
        required: true
        type: "string"
      responses:
        200:
          description: "Success - List of items returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveEnrollmentsListResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Enrollments"
    post:
      tags:
      - "indemnities"
      summary: "Add a new enrollment to the system"
      operationId: "addEnrollment"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: "The MediaType of the request content"
        required: true
        type: "string"
        default: "application/json"
      - name: "Accept"
        in: "header"
        description: "The MediaType of the response content"
        required: true
        type: "string"
        default: "application/json"
      - name: "User-Id"
        in: "header"
        description: "Unique identifier of the user initiating the call"
        required: true
        type: "string"
      - name: "userName"
        in: "path"
        description: "Id of the account to be retrieved"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateEnrollmentRequest"
      responses:
        200:
          description: "Success - Item returned in the response payload"
          schema:
            $ref: "#/definitions/RetrieveEnrollmentResponse"
        400:
          description: "Bad request - some of the input parameters are incorrect or\
            \ invalid"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Indemnities"
definitions:
  ErrorResponse:
    properties:
      errorCode:
        type: "integer"
        description: "Unique Error Code that identifies the error"
      errorMessage:
        type: "string"
        description: "Error Messages that describes the error"
    description: "Error Object"
  CreateCourseRequest:
    properties:
      course:
        $ref: "#/definitions/CourseObject"
    description: "This is the schema of request payload when a New Course is created\
      \ in the system"
    example:
      course:
        courseEndTime: "courseEndTime"
        courseStartTime: "courseStartTime"
        courseEndDate: "courseEndDate"
        ageRestrictions: "ageRestrictions"
        courseStartDate: "courseStartDate"
        tags:
        - "tags"
        - "tags"
        slots: 0
        courseVenue: "courseVenue"
        teachers:
        - "teachers"
        - "teachers"
        imageURL: "imageURL"
        flyerURL: "flyerURL"
        courseId: "courseId"
        courseDays: "courseDays"
        courseRemarks: "courseRemarks"
  RetrieveCoursesListResponse:
    properties:
      courses:
        type: "array"
        description: "List of Courses"
        items:
          $ref: "#/definitions/CourseObject"
    description: "This is the schema of response payload when a list of course information\
      \ is requested"
    example:
      courses:
      - courseEndTime: "courseEndTime"
        courseStartTime: "courseStartTime"
        courseEndDate: "courseEndDate"
        ageRestrictions: "ageRestrictions"
        courseStartDate: "courseStartDate"
        tags:
        - "tags"
        - "tags"
        slots: 0
        courseVenue: "courseVenue"
        teachers:
        - "teachers"
        - "teachers"
        imageURL: "imageURL"
        flyerURL: "flyerURL"
        courseId: "courseId"
        courseDays: "courseDays"
        courseRemarks: "courseRemarks"
      - courseEndTime: "courseEndTime"
        courseStartTime: "courseStartTime"
        courseEndDate: "courseEndDate"
        ageRestrictions: "ageRestrictions"
        courseStartDate: "courseStartDate"
        tags:
        - "tags"
        - "tags"
        slots: 0
        courseVenue: "courseVenue"
        teachers:
        - "teachers"
        - "teachers"
        imageURL: "imageURL"
        flyerURL: "flyerURL"
        courseId: "courseId"
        courseDays: "courseDays"
        courseRemarks: "courseRemarks"
  RetrieveCourseResponse:
    properties:
      course:
        $ref: "#/definitions/CourseObject"
    description: "This is the schema of response payload when a course information\
      \ is requested"
    example:
      course:
        courseEndTime: "courseEndTime"
        courseStartTime: "courseStartTime"
        courseEndDate: "courseEndDate"
        ageRestrictions: "ageRestrictions"
        courseStartDate: "courseStartDate"
        tags:
        - "tags"
        - "tags"
        slots: 0
        courseVenue: "courseVenue"
        teachers:
        - "teachers"
        - "teachers"
        imageURL: "imageURL"
        flyerURL: "flyerURL"
        courseId: "courseId"
        courseDays: "courseDays"
        courseRemarks: "courseRemarks"
  CourseObject:
    properties:
      courseId:
        type: "string"
        description: "Unique course id"
      ageRestrictions:
        type: "string"
        description: "A String describing any age restrictions"
      courseStartTime:
        type: "string"
        description: "Course start time represented as a string in pacific time in\
          \ the format hh:mm"
      courseEndTime:
        type: "string"
        description: "Course end time represented as a string in pacific time in the\
          \ format hh:mm"
      courseStartDate:
        type: "string"
        description: "Course start date represented as a string in pacific time in\
          \ the format yyyy-mm-dd"
      courseEndDate:
        type: "string"
        description: "Course end date represented as a string in pacific time in the\
          \ format yyyy-mm-dd"
      courseDays:
        type: "string"
        description: "Course days or String describing the frequency/recurrence of\
          \ the course"
      courseVenue:
        type: "string"
        description: "Facility where the course will be taught"
      flyerURL:
        type: "string"
        description: "URL of the course's flyer"
      imageURL:
        type: "string"
        description: "URL of the course's image"
      slots:
        type: "integer"
        description: "Class size or total number of slots in the course"
      courseRemarks:
        type: "string"
        description: "Any additional notes or remarks about the course"
      teachers:
        type: "array"
        description: "List of teacher (or coordinator) ids of the course"
        items:
          type: "string"
      tags:
        type: "array"
        description: "List of tags associated with the course"
        items:
          type: "string"
    description: "Course Object"
    example:
      courseEndTime: "courseEndTime"
      courseStartTime: "courseStartTime"
      courseEndDate: "courseEndDate"
      ageRestrictions: "ageRestrictions"
      courseStartDate: "courseStartDate"
      tags:
      - "tags"
      - "tags"
      slots: 0
      courseVenue: "courseVenue"
      teachers:
      - "teachers"
      - "teachers"
      imageURL: "imageURL"
      flyerURL: "flyerURL"
      courseId: "courseId"
      courseDays: "courseDays"
      courseRemarks: "courseRemarks"
  RegisterTeacherRequest:
    properties:
      teacher:
        $ref: "#/definitions/TeacherObject"
    description: "This is the schema of request payload when a New Teacher is registered\
      \ in the system"
    example:
      teacher:
        skillSet:
        - "skillSet"
        - "skillSet"
        indemnitySigned: true
        identityVerified: true
        userName: "userName"
        backgroundVerified: true
  RetrieveTeachersListResponse:
    properties:
      teachers:
        type: "array"
        description: "List of Teachers"
        items:
          $ref: "#/definitions/TeacherObject"
    description: "This is the schema of response payload when a list of teacher information\
      \ is requested"
    example:
      teachers:
      - skillSet:
        - "skillSet"
        - "skillSet"
        indemnitySigned: true
        identityVerified: true
        userName: "userName"
        backgroundVerified: true
      - skillSet:
        - "skillSet"
        - "skillSet"
        indemnitySigned: true
        identityVerified: true
        userName: "userName"
        backgroundVerified: true
  RetrieveTeacherResponse:
    properties:
      teacher:
        $ref: "#/definitions/TeacherObject"
    description: "This is the schema of response payload when a teacher's information\
      \ is requested"
    example:
      teacher:
        skillSet:
        - "skillSet"
        - "skillSet"
        indemnitySigned: true
        identityVerified: true
        userName: "userName"
        backgroundVerified: true
  TeacherObject:
    properties:
      userName:
        type: "string"
        description: "Unique userName of the devotee"
      skillSet:
        type: "array"
        description: "Teacher's skill set"
        items:
          type: "string"
      indemnitySigned:
        type: "boolean"
        description: "Boolean indicating if the teacher has signed an indemnity"
      backgroundVerified:
        type: "boolean"
        description: "Boolean indicating if the teacher's background check has been\
          \ complete"
      identityVerified:
        type: "boolean"
        description: "Boolean indicating if the teacher's identity verified"
    description: "Teacher Object"
    example:
      skillSet:
      - "skillSet"
      - "skillSet"
      indemnitySigned: true
      identityVerified: true
      userName: "userName"
      backgroundVerified: true
  CreateIndemnityRequest:
    properties:
      indemnity:
        $ref: "#/definitions/IndemnityObject"
    description: "This is the schema of request payload when a New Indemnity is submited\
      \ to the system"
    example:
      indemnity:
        guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityFormVersion: "indemnityFormVersion"
  RetrieveIndemnitiesListResponse:
    properties:
      indemnities:
        type: "array"
        description: "List of Indemnities"
        items:
          $ref: "#/definitions/IndemnityObject"
    description: "This is the schema of response payload when a list of indemnity\
      \ information is requested"
    example:
      indemnities:
      - guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityFormVersion: "indemnityFormVersion"
      - guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityFormVersion: "indemnityFormVersion"
  RetrieveIndemnityResponse:
    properties:
      indemnity:
        $ref: "#/definitions/IndemnityObject"
    description: "This is the schema of response payload when an indemnity form's\
      \ information is requested"
    example:
      indemnity:
        guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityFormVersion: "indemnityFormVersion"
  IndemnityObject:
    properties:
      userName:
        type: "string"
        description: "Unique devotee userName of the participant"
      participantName:
        $ref: "#/definitions/NameObject"
      guardianName:
        $ref: "#/definitions/NameObject"
      indemnityFormVersion:
        type: "string"
        description: "String representing the name ot number of indemnity content\
          \ version."
    description: "Indemnity Object"
    example:
      guardianName:
        firstName: "firstName"
        lastName: "lastName"
        middleName: "middleName"
      userName: "userName"
      participantName:
        firstName: "firstName"
        lastName: "lastName"
        middleName: "middleName"
      indemnityFormVersion: "indemnityFormVersion"
  RetrieveAccountsListResponse:
    properties:
      accounts:
        type: "array"
        description: "List of Accounts"
        items:
          $ref: "#/definitions/AccountObject"
    description: "This is the schema of response payload when an account's information\
      \ is requested"
    example:
      accounts:
      - phoneNumber: "phoneNumber"
        roles:
        - "roles"
        - "roles"
        name:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        dateOfBirth: "dateOfBirth"
        userName: "userName"
        familyMembers:
        - name:
            firstName: "firstName"
            lastName: "lastName"
            middleName: "middleName"
          dateOfBirth: "dateOfBirth"
        - name:
            firstName: "firstName"
            lastName: "lastName"
            middleName: "middleName"
          dateOfBirth: "dateOfBirth"
        email: "email"
      - phoneNumber: "phoneNumber"
        roles:
        - "roles"
        - "roles"
        name:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        dateOfBirth: "dateOfBirth"
        userName: "userName"
        familyMembers:
        - name:
            firstName: "firstName"
            lastName: "lastName"
            middleName: "middleName"
          dateOfBirth: "dateOfBirth"
        - name:
            firstName: "firstName"
            lastName: "lastName"
            middleName: "middleName"
          dateOfBirth: "dateOfBirth"
        email: "email"
  AccountObject:
    properties:
      userName:
        type: "string"
        description: "Unique userName of the devotee"
      name:
        $ref: "#/definitions/NameObject"
      phoneNumber:
        type: "string"
        description: "Phone number associated with the devotee's account"
      email:
        type: "string"
        description: "Email Id associated with the devotee's account"
      dateOfBirth:
        type: "string"
        description: "Date of birth of the Devotee in the format YYYY-MM-DD"
      familyMembers:
        type: "array"
        description: "List of family Members"
        items:
          $ref: "#/definitions/FamilyMember"
      roles:
        type: "array"
        description: "List of roles"
        items:
          type: "string"
    description: "Devotee Account Object"
    example:
      phoneNumber: "phoneNumber"
      roles:
      - "roles"
      - "roles"
      name:
        firstName: "firstName"
        lastName: "lastName"
        middleName: "middleName"
      dateOfBirth: "dateOfBirth"
      userName: "userName"
      familyMembers:
      - name:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        dateOfBirth: "dateOfBirth"
      - name:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        dateOfBirth: "dateOfBirth"
      email: "email"
  CreateEnrollmentRequest:
    properties:
      enrollment:
        $ref: "#/definitions/EnrollmentObject"
    description: "This is the schema of request payload when a New Enrollment is created\
      \ in the system"
    example:
      enrollment:
        enrollmentId: "enrollmentId"
        guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityId: "indemnityId"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        isParticipantUnder18: true
  RetrieveEnrollmentsListResponse:
    properties:
      enrollment:
        type: "array"
        description: "List of Enrollments"
        items:
          $ref: "#/definitions/EnrollmentObject"
    description: "This is the schema of response payload when a list of indemnity\
      \ information is requested"
    example:
      enrollment:
      - enrollmentId: "enrollmentId"
        guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityId: "indemnityId"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        isParticipantUnder18: true
      - enrollmentId: "enrollmentId"
        guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityId: "indemnityId"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        isParticipantUnder18: true
  RetrieveEnrollmentResponse:
    properties:
      enrollment:
        $ref: "#/definitions/EnrollmentObject"
    description: "This is the schema of response payload when an enrollment's information\
      \ is requested"
    example:
      enrollment:
        enrollmentId: "enrollmentId"
        guardianName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        indemnityId: "indemnityId"
        userName: "userName"
        participantName:
          firstName: "firstName"
          lastName: "lastName"
          middleName: "middleName"
        isParticipantUnder18: true
  EnrollmentObject:
    properties:
      enrollmentId:
        type: "string"
        description: "Unique enrollment id"
      userName:
        type: "string"
        description: "Unique userName of the participants devotee account"
      participantName:
        $ref: "#/definitions/NameObject"
      guardianName:
        $ref: "#/definitions/NameObject"
      isParticipantUnder18:
        type: "boolean"
        description: "true id participant age is under 18 else false"
      indemnityId:
        type: "string"
        description: "indemnity form id associated with the enrollment"
    description: "Enrollment Object"
    example:
      enrollmentId: "enrollmentId"
      guardianName:
        firstName: "firstName"
        lastName: "lastName"
        middleName: "middleName"
      indemnityId: "indemnityId"
      userName: "userName"
      participantName:
        firstName: "firstName"
        lastName: "lastName"
        middleName: "middleName"
      isParticipantUnder18: true
  NameObject:
    properties:
      firstName:
        type: "string"
        description: "First name of teacher"
      middleName:
        type: "string"
        description: "Middle name of teacher"
      lastName:
        type: "string"
        description: "Last name of teacher"
    description: "Name Object"
    example:
      firstName: "firstName"
      lastName: "lastName"
      middleName: "middleName"
  FamilyMember:
    properties:
      name:
        $ref: "#/definitions/NameObject"
      dateOfBirth:
        type: "string"
        description: "Date of birth of the Devotee in the format YYYY-MM-DD"
    description: "Devotee Object"
    example:
      name:
        firstName: "firstName"
        lastName: "lastName"
        middleName: "middleName"
      dateOfBirth: "dateOfBirth"
parameters:
  Content-Type:
    name: "Content-Type"
    in: "header"
    description: "The MediaType of the request content"
    required: true
    type: "string"
    default: "application/json"
  Accept:
    name: "Accept"
    in: "header"
    description: "The MediaType of the response content"
    required: true
    type: "string"
    default: "application/json"
  User-Id:
    name: "User-Id"
    in: "header"
    description: "Unique identifier of the user initiating the call"
    required: true
    type: "string"
responses:
  400ErrorResponse:
    description: "Bad request - some of the input parameters are incorrect or invalid"
    schema:
      $ref: "#/definitions/ErrorResponse"
  403ErrorResponse:
    description: "Forbidden - the devotee does not have permissions to call this endpoint"
    schema:
      $ref: "#/definitions/ErrorResponse"
  404ErrorResponse:
    description: "Resource Not Found"
    schema:
      $ref: "#/definitions/ErrorResponse"
  500ErrorResponse:
    description: "Internal Server Error"
    schema:
      $ref: "#/definitions/ErrorResponse"
